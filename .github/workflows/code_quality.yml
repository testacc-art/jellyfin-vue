name: Quality checks 👌🧪

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

on:
  pull_request:
    paths-ignore:
      - "**/*.md"
  schedule:
    - cron: "30 7 * * 6"
  workflow_dispatch:

jobs:
  dependency-review:
    name: Vulnerable dependencies 🔎
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3.2.0

      - name: Scan
        uses: actions/dependency-review-action@v3.0.2

  lint:
    name: Lint 🔬
    runs-on: ubuntu-latest

    steps:
      - name: Checkout ⬇️
        uses: actions/checkout@v3.2.0
      - run: echo 'alias npm="npm --ignore-workspaces"' >> ~/.bash_profile
      - name: Setup node environment ⚙️
        uses: actions/setup-node@v3.5.1
        with:
          node-version: 18
          cache: "npm"
          check-latest: true

      - name: Install dependencies 📦
        run: npm ci --no-audit

      - name: Run linter ✏️
        run: npm run lint

  typecheck:
    name: Typecheck 🈯
    runs-on: ubuntu-latest

    steps:
      - name: Checkout ⬇️
        uses: actions/checkout@v3.2.0

      - name: Setup node environment ⚙️
        uses: actions/setup-node@v3.5.1
        with:
          node-version: 18
          cache: "npm"
          check-latest: true

      - name: Install dependencies 📦
        run: npm ci --no-audit

      - name: Run typecheck 📖
        run: npm run typecheck

  build:
    name: Build frontend 🛠️
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - "linux/amd64"
          - "linux/arm64"
          - "linux/arm"

    steps:
      - name: Checkout ⬇️
        uses: actions/checkout@v3.2.0

      - name: Configure QEMU ⚙️
        uses: docker/setup-qemu-action@v2.1.0

      - name: Configure Docker Buildx ⚙️
        uses: docker/setup-buildx-action@v2.2.1

      - name: Build Docker images 🛠️
        uses: docker/build-push-action@v3.2.0
        with:
          context: .
          platforms: ${{ matrix.platform }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true
          tags: |
            jellyfin/jellyfin-vue:pr-build

      - name: Extract built client and Docker image for artifact publishing 📦
        if: ${{ matrix.platform == 'linux/amd64' }}
        run: |
          docker save jellyfin/jellyfin-vue:pr-build > docker_image.tar
          docker cp $(docker create --name jf jellyfin/jellyfin-vue:pr-build):/usr/share/nginx/html/ ./dist
          docker rm jf

      - name: Upload artifact (Docker image) ⬆️📦
        uses: actions/upload-artifact@v3.1.1
        if: ${{ matrix.platform == 'linux/amd64' }}
        with:
          name: docker_image
          path: |
            docker_image.tar

      - name: Upload artifact (Client) ⬆️💻
        uses: actions/upload-artifact@v3.1.1
        if: ${{ matrix.platform == 'linux/amd64' }}
        with:
          name: frontend
          path: |
            dist

  build_tauri:
    name: Build Tauri 🛠️
    strategy:
      fail-fast: false
      matrix:
        platform:
          - "macos-latest"
          - "ubuntu-latest"
          - "windows-latest"

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout ⬇️
        uses: actions/checkout@v3.2.0

      - name: Setup node environment ⚙️
        uses: actions/setup-node@v3.5.1
        with:
          node-version: 18
          cache: "npm"
          check-latest: true

      - name: Install dependencies 📦
        run: npm ci --no-audit -w tauri

      - name: Install webkit2gtk (ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y webkit2gtk-4.0

      - name: Generate Tauri icons 🖌️
        run: "npm run tauri:icon -w tauri"

      - name: Build Tauri 🛠️
        run: "npm run tauri:build -w tauri"

      - name: Upload artifact (Linux) ⬆️🐧
        uses: actions/upload-artifact@v3.1.1
        if: matrix.platform == 'ubuntu-latest'
        with:
          name: jellyfin-vue_linux-amd64
          path: |
            tauri/target/release/bundle/deb/*.deb
            tauri/target/release/bundle/appimage_deb

      - name: Upload artifact (MacOS) ⬆️🍎
        uses: actions/upload-artifact@v3.1.1
        if: matrix.platform == 'macos-latest'
        with:
          name: jellyfin-vue_macOS
          path: |
            tauri/target/release/bundle/macos
            tauri/target/release/bundle/dmg/*.dmg

      - name: Upload artifact (Windows) ⬆️🪟
        uses: actions/upload-artifact@v3.1.1
        if: matrix.platform == 'windows-latest'
        with:
          name: jellyfin-vue_windows_amd64
          path: tauri/target/release/jellyfin-vue.exe

  pr_context:
    name: Save PR context as artifact
    if: ${{ always() && !cancelled() && github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    needs:
      - dependency-review
      - lint
      - typecheck
      - build
      - build_tauri

    steps:
      - name: Save PR context
        env:
          PR_NUMBER: ${{ github.event.number }}
          PR_SHA: ${{ github.sha }}
        run: |
          echo $PR_NUMBER > PR_number
          echo $PR_SHA > PR_sha

      - name: Upload PR number as artifact
        uses: actions/upload-artifact@v3.1.1
        with:
          name: PR_context
          path: |
            PR_number
            PR_sha

  conventional_commits:
    name: Conventional commits check 💬
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout ⬇️
        uses: actions/checkout@v3.2.0

      - name: Check if all commits comply with the specification
        uses: webiny/action-conventional-commits@v1.1.0
